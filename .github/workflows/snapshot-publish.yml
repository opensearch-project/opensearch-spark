name: Publish snapshots to maven

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 0.*
      - commit-metadata-poc

jobs:
  build-and-publish-snapshots:
    strategy:
      fail-fast: false
    #if: github.repository == 'opensearch-project/opensearch-spark'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v3
        id: checkout

      # Extract version from build.sbt file
      - name: Extract version from build.sbt
        id: extract_version
        run: |
          # Extract the version from build.sbt
          VERSION=$(grep -E 'ThisBuild / version := "[^"]+"' build.sbt | sed 's/.*"\(.*\)".*/\1/')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      # Capture the commit ID for metadata purposes
      - name: Set commit ID
        id: set_commit
        run: |
          COMMIT_ID=$(git log -1 --format='%H')
          echo "commit_id=${COMMIT_ID}" >> $GITHUB_OUTPUT
          echo "Using commit ID: ${COMMIT_ID}"

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Set up SBT
        uses: sbt/setup-sbt@v1

      - name: Publish to Local Maven
        run: |
          # Use -no-colors for cleaner logs
          sbt -no-colors clean standaloneCosmetic/publishM2
          sbt -no-colors clean sparkPPLCosmetic/publishM2
          sbt -no-colors clean sparkSqlApplicationCosmetic/publishM2
          
          # Verify the published artifacts have the correct version
          echo "Checking published artifacts:"
          find $HOME/.m2/repository/org/opensearch/ -name "*${{ steps.extract_version.outputs.version }}*" || echo "No artifacts found with the expected version"

      - uses: actions/checkout@v3
        with:
          repository: 'opensearch-project/opensearch-build-libraries'
          path: 'build'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.PUBLISH_SNAPSHOTS_ROLE }}
          aws-region: us-east-1

      - name: generate sha and md5
        run: |
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.pom" -type f`; do sha512sum "$i" | awk '{print $1}' >> "$i.sha512"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.jar" -type f`; do sha512sum "$i" | awk '{print $1}' >> "$i.sha512"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.pom" -type f`; do sha256sum "$i" | awk '{print $1}' >> "$i.sha256"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.jar" -type f`; do sha256sum "$i" | awk '{print $1}' >> "$i.sha256"; done

      - name: Install XML tools
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet

      - name: Publish snapshots to maven and update metadata
        run: |
          # Get credentials for publishing
          export SONATYPE_USERNAME=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-username --query SecretString --output text)
          export SONATYPE_PASSWORD=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-password --query SecretString --output text)
          echo "::add-mask::$SONATYPE_USERNAME"
          echo "::add-mask::$SONATYPE_PASSWORD"
          export SNAPSHOT_REPO_URL="https://aws.oss.sonatype.org/content/repositories/snapshots/"

          # Publish snapshots to maven
          cd build/resources/publish/
          cp -a $HOME/.m2/repository/* ./
          ./publish-snapshot.sh ./

          echo "Snapshot publishing completed. Now cleaning up old metadata files..."

          # Define projects and versions to work with
          PROJECTS=("opensearch-spark-standalone_2.12" "opensearch-spark-ppl_2.12" "opensearch-spark-sql-application_2.12")
          VERSIONS=("0.7.0-SNAPSHOT" "0.8.0-SNAPSHOT")
          CURRENT_VERSION="${{ steps.extract_version.outputs.version }}-SNAPSHOT"
          COMMIT_ID="${{ steps.set_commit.outputs.commit_id }}"

          # Remove old metadata.xml files
          for PROJECT in "${PROJECTS[@]}"; do
            for VERSION in "${VERSIONS[@]}"; do
              # Delete the old metadata.xml files
              METADATA_FILE_URL="${SNAPSHOT_REPO_URL}org/opensearch/${PROJECT}/${VERSION}/metadata.xml"
              echo "Deleting old metadata file at ${METADATA_FILE_URL}"
          
              # Use curl to delete the file (if it exists)
              curl -X DELETE -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" "${METADATA_FILE_URL}" || echo "File might not exist or couldn't be deleted"
            done
          done

          echo "Old metadata files cleanup completed. Now updating maven-metadata.xml with commit ID..."

          # Update maven-metadata.xml for current version only
          for PROJECT in "${PROJECTS[@]}"; do
            echo "Processing metadata for ${PROJECT}"
          
            TEMP_DIR=$(mktemp -d)
          
            # Download current maven-metadata.xml
            METADATA_URL="${SNAPSHOT_REPO_URL}org/opensearch/${PROJECT}/${CURRENT_VERSION}/maven-metadata.xml"
            echo "Downloading metadata from ${METADATA_URL}"
          
            # Wait a moment to ensure metadata is available after publishing
            sleep 5
          
            curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${TEMP_DIR}/maven-metadata.xml" "${METADATA_URL}"
          
            # Check if download was successful
            if [ ! -s "${TEMP_DIR}/maven-metadata.xml" ]; then
              echo "Failed to download maven-metadata.xml for ${PROJECT}, will retry in 10 seconds"
              sleep 10
              curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${TEMP_DIR}/maven-metadata.xml" "${METADATA_URL}"
          
              if [ ! -s "${TEMP_DIR}/maven-metadata.xml" ]; then
                echo "Failed again to download maven-metadata.xml for ${PROJECT}, skipping"
                continue
              fi
            fi
          
            # Add commit ID to the versioning section
            xmlstarlet ed -L \
              -s "/metadata/versioning" -t elem -n "commit_id" -v "${COMMIT_ID}" \
              "${TEMP_DIR}/maven-metadata.xml" || {
                echo "Failed to modify maven-metadata.xml for ${PROJECT}"
                cat "${TEMP_DIR}/maven-metadata.xml"
                continue
              }
          
            # Upload modified metadata back
            echo "Uploading modified metadata to ${METADATA_URL}"
            curl -v -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${TEMP_DIR}/maven-metadata.xml" "${METADATA_URL}"
          
            # Clean up
            rm -rf "${TEMP_DIR}"
          done